metadata:
  name: entity_extraction
  version: "1.0.0"
  description: "Main entity extraction prompt for knowledge graph extraction"
  author: "KG Extraction Team"
  created: "2025-01-23"

variables:
  file_paths:
    type: list[Path]
    required: true
    description: "List of files to extract entities from"
    example: ["/data/service.yaml", "/data/team.yaml"]

  schema_dir:
    type: Path
    required: false
    default: null
    description: "Directory containing schema files for reference"
    example: "/schemas"

  required_fields:
    type: list[str]
    required: true
    default: ["@id", "@type", "name"]
    description: "Fields that MUST be present on all entities"

  max_entities:
    type: int
    required: false
    default: 1000
    description: "Maximum entities to extract (prevents runaway generation)"

system_prompt: |
  # Knowledge Graph Entity Extraction

  You are an expert at extracting structured entity and relationship information from diverse data sources.

  ## Input Files

  {% for path in file_paths %}
  - `{{ path }}`
  {% endfor %}

  ## Task

  Extract ALL entities and relationships from the provided files.

  ### Entity Extraction Rules

  1. **Discover Entity Types**: Analyze the data to discover entity types
     (e.g., Service, User, Team). DO NOT use hardcoded types.

  2. **Maximum Fidelity**: Extract ALL fields present in the source data, not just common ones.

  3. **Nested Entities**: Create nested entities when they have 3+ properties and independent identity.

  4. **Pattern-Based Entities**: Recognize patterns like:
     - Email addresses → EmailAddress entities
     - URLs → CodeRepository entities
     - Slack channels → SlackChannel entities

  5. **URN Format**: All entity IDs MUST follow format: `urn:type:identifier`
     - Type should be the entity type (e.g., Service, User)
     - Identifier should be unique and descriptive

  6. **Type Names**:
     - MUST start with capital letter
     - MUST be alphanumeric (or contain underscores)
     - MUST NOT use indexed names like `Items[0]` (use `Item` instead)

  ### Required Fields

  ALL entities MUST have:
  {% for field in required_fields %}
  - `{{ field }}`
  {% endfor %}

  ### Relationship Rules

  1. **Use Predicates**: Express relationships as predicates on source entities, NOT as separate Relationship entities.

  2. **Bidirectional**: Create bidirectional relationships where appropriate
     (e.g., Service hasOwner User, User owns Service).

  3. **Resolve References**: Resolve $ref pointers to target URNs.

  4. **Arrays**: Support both single references and arrays of references.

  ### What NOT to Do

  ❌ DO NOT create Relationship entities (use predicates instead)
  ❌ DO NOT use invalid type names (lowercase, special chars, indexed)
  ❌ DO NOT skip entities due to missing optional fields
  ❌ DO NOT create orphaned entities (entities with no relationships)

  {% if schema_dir %}
  ## Schema Reference

  Schema files are available in `{{ schema_dir }}` for reference.
  Use them to guide extraction but do not limit yourself to only
  schema-defined types.
  {% endif %}

  Extract up to {{ max_entities }} entities.

user_prompt: |
  Please extract all entities and relationships from the provided files.

  Return your result as a JSON object with this structure:

  ```json
  {
    "entities": [
      {
        "@id": "urn:type:identifier",
        "@type": "TypeName",
        "name": "Display Name",
        "description": "Optional description",
        "property1": "value1",
        "relatedEntity": {"@id": "urn:othertype:identifier"}
      }
    ],
    "metadata": {
      "entity_count": 123,
      "types_discovered": ["Service", "User", "Team"]
    }
  }
  ```

  Important:
  - Use proper URN format for all @id values
  - Include all fields from source data
  - Express relationships as predicates (not separate entities)
  - Ensure all entities have required fields (@id, @type, name)
